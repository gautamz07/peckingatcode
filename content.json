{"pages":[],"posts":[{"title":"Switch branch in git","text":"Well How do we switch branches1$ git switch -C remote/&lt;branch-name&gt; Simple just switch buddy !","link":"/peckingatcode/2020/03/31/switch-branch-in-git/"},{"title":"A Quick dive into git stash","text":"To list out all the stashs 1$ git stash list To list out contents of a specific stash 1$ git stash show stash@{0} -p To list out just the name of the files (not the contents) 1$ git stash show stash@{0} --name-only","link":"/peckingatcode/2020/04/04/quick-dive-into-git-stash/"},{"title":"Svg letter gradient animation","text":"Lets use the below image created in inkscape to create a animation. to be continued…","link":"/peckingatcode/2020/05/02/svg-letter-gradient-animation/"},{"title":"Git stash staged files only","text":"If you’ve been using git for a while , chances are you’ve come across the scenario where you need to stash not all your changes , but just the changes you’ve staged. In this scenario you can simply double stash in 2 simple steps. 1$ git stash --keep-index the above saves all your changes in a stash but keeps the staging changes in the working directory. then you can just 1$ git stash push -m 'staging changes only' Now you have your stash with staging changes only.","link":"/peckingatcode/2020/11/15/git-stash-staged-files-only/"},{"title":"Identify content type of API response","text":"You can set 1response.headers.get(\"Content-Type\") And then use 1.get(param) Source :- stack overflow","link":"/peckingatcode/2020/11/10/identify-content-type-of-API-response/"},{"title":"How to get a nested object value using lodash.","text":"Often we are faced with the scenario when a nested value of an obeject needs to be passed into a variable or parameter to an API. something like below: 123MyObject = { a: [ '1' , { a : 'i am inner a' } ]} and the value can be extracted fairly easily using the dot ot arrow notation like so: 1const value = MyObject.a[1].a we may also want to check if the index 1 actually exist so added a check would be advisable or your app, webpage could break, so we could simple add a trivial check like below: 12// A better alternative to the above piece of code const value = MyObject.a.length &gt; 0 &amp;&amp; MyObject.a[1].a Now a game changer would be if we are using a library like lodash, which extacts the nested value, irrespective of how deeply nested it is and spits out undefined if at any level the value if not to be found. so the code can be condensed to a single like like below: 12345const myObj = { a: [ '1' , { a : 'i am inner a' } ]}const value = _.get(myObj, 'a[1].a.d') Now instead of undefined, if you’d like a default value, you can set it like so 1const value = _.get(myObj, 'a[1].a.d') Thats all there is to it !","link":"/peckingatcode/2020/11/22/how-to-get-a-nested-object-value-using-lodash/"},{"title":"How to log commits to remote branch","text":"Do you have to often switch between the browser and your editor to check the latest commits to a remote branch, to check if any new commits have been added by a developer ? well in that case you can use a combination of commands that would log the latest commits to your console. 1git fetch origin dev-branch and then just log it like below. 1git log --pretty=oneline dev-branch Note for self :- Look up how to alias current branch instead of typing it out.","link":"/peckingatcode/2021/03/14/how-to-log-commits-to-remote-branch/"},{"title":"Vanilla javascript check if variable is a string","text":"you can use the typeof operator like below 12let foo = 'Hello Janco !'console.log(typeof foo) // will log 'string' For a more bullet proof check incase your using object-wrapped strings, you can do a double check like below 123if(typeof foo === 'string' &amp;&amp; foo instanceof String) { // business code goes here !}","link":"/peckingatcode/2021/07/11/vanilla-javascript-check-if-variable-is-a-string/"},{"title":"Babel basic usage guide plus usage with webpack","text":"Just for demostraction purpose lets play around with babel a little and over time i’ll expand on this article on how to used babel alongside webpack. For starters lets create a folder structure that resembles the below :- 123- src - index.js- package.json Let the contents of index.js be as follows. 123const fruits = ['apples', 'oranges', 'mangos']const fruitcopy = [...fruits]const addition = (a,b) =&gt; a + b You should have a package.json folder by default with no dependencies when you run npm init inside the folder ypu’re runnint this project in. Run the below command to add a couple of dev dependencies. 1yarn add @babel/cli @babel/core --dev It is recommended you add these dependencies locally to your project instead of have it globally installed as that makes your project more flexible (you can have different versions based on project) and portable(dependencies can be installed based on package.json).Now you can add the following command inside your package.json file. 123\"scripts\": { \"build\": \"babel src -d lib\"}, Now when you run yarn build in your root folder, you will see a lib directory created but the contents are not quite compiled to ES-5 syntax, which is basically what we want to do with babel. For that to happen we will have to install a present and create a babel.config.json file. 12// Contents of .babel.config.json file in rootdirectoryyarn add @babel/preset-env --dev Also install the present 123{ \"presets\": [\"@babel/preset-env\"]} At this point if you run yarn build you should see a index.js file inside the lib directory with following contents :- 12345678&quot;use strict&quot;;var fruits = ['apples', 'oranges', 'mangos'];var fruitcopy = [].concat(fruits);var addition = function addition(a, b) { return a + b;}; Your final directory shoudl look something like below. 123456- src - index.js- package.json- babel.config.json- lib - index.js Voila ! we’re done and with a no frills setup we are now able to use babel to trasform code into ES-5 compatable executable code, thanks to babel and @babel/preset-env. In larger projects hoever its unlikely we would use babel as a standalone and rather use with alongside a task runner (gulp, grunt) or bundler (eg. webpack). Lets have a look into that in the next series. Also on a sidenote the @babel/preset-env has multile options of its own that you can explore and set so as to reduce your bundle size further. Hope this helped you understand the mystery of babel partially. Cheers !","link":"/peckingatcode/2021/08/21/babel-basic-usage-guide-plus-usage-with-webpack/"},{"title":"git alias for git log and git oneline","text":"In this overly simplistic we’re going to add 2 simple alias for a couple of common git log options. Firstly (keep in mind we use the --graph option below because the output is slightly more clear then just a plan git log), 1234567git log --graph// instead of typing out this command, lets add an aliasgit config --global alias.lg \"log --graph\"// Now you can use the command like sogit lg lastly, 1234567git log --oneline// instead of typing out this command, lets add an aliasgit config --global alias.lo \"log --oneline\"// Now you can use the command like sogit lo","link":"/peckingatcode/2021/09/12/git-alias-for-git-log-and-git-oneline/"}],"tags":[{"name":"git","slug":"git","link":"/peckingatcode/tags/git/"},{"name":"javascript","slug":"javascript","link":"/peckingatcode/tags/javascript/"},{"name":"productivity","slug":"productivity","link":"/peckingatcode/tags/productivity/"},{"name":"svg","slug":"svg","link":"/peckingatcode/tags/svg/"},{"name":"fetch","slug":"fetch","link":"/peckingatcode/tags/fetch/"},{"name":"github","slug":"github","link":"/peckingatcode/tags/github/"},{"name":"lodash","slug":"lodash","link":"/peckingatcode/tags/lodash/"},{"name":"babel","slug":"babel","link":"/peckingatcode/tags/babel/"},{"name":"ecmascript-6","slug":"ecmascript-6","link":"/peckingatcode/tags/ecmascript-6/"},{"name":"compiler","slug":"compiler","link":"/peckingatcode/tags/compiler/"}],"categories":[]}