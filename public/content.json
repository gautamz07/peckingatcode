{"pages":[],"posts":[{"title":"Switch branch in git","text":"Well How do we switch branches1$ git switch -C remote/&lt;branch-name&gt; Simple just switch buddy !","link":"/peckingatcode/2020/03/31/switch-branch-in-git/"},{"title":"A Quick dive into git stash","text":"To list out all the stashs 1$ git stash list To list out contents of a specific stash 1$ git stash show stash@{0} -p To list out just the name of the files (not the contents) 1$ git stash show stash@{0} --name-only","link":"/peckingatcode/2020/04/04/quick-dive-into-git-stash/"},{"title":"Svg letter gradient animation","text":"Lets use the below image created in inkscape to create a animation. to be continued…","link":"/peckingatcode/2020/05/02/svg-letter-gradient-animation/"},{"title":"Git stash staged files only","text":"If you’ve been using git for a while , chances are you’ve come across the scenario where you need to stash not all your changes , but just the changes you’ve staged. In this scenario you can simply double stash in 2 simple steps. 1$ git stash --keep-index the above saves all your changes in a stash but keeps the staging changes in the working directory. then you can just 1$ git stash push -m 'staging changes only' Now you have your stash with staging changes only.","link":"/peckingatcode/2020/11/15/git-stash-staged-files-only/"},{"title":"Identify content type of API response","text":"You can set 1response.headers.get(\"Content-Type\") And then use 1.get(param) Source :- stack overflow","link":"/peckingatcode/2020/11/10/identify-content-type-of-API-response/"},{"title":"How to get a nested object value using lodash.","text":"Often we are faced with the scenario when a nested value of an obeject needs to be passed into a variable or parameter to an API. something like below: 123MyObject = { a: [ '1' , { a : 'i am inner a' } ]} and the value can be extracted fairly easily using the dot ot arrow notation like so: 1const value = MyObject.a[1].a we may also want to check if the index 1 actually exist so added a check would be advisable or your app, webpage could break, so we could simple add a trivial check like below: 12// A better alternative to the above piece of code const value = MyObject.a.length &gt; 0 &amp;&amp; MyObject.a[1].a Now a game changer would be if we are using a library like lodash, which extacts the nested value, irrespective of how deeply nested it is and spits out undefined if at any level the value if not to be found. so the code can be condensed to a single like like below: 12345const myObj = { a: [ '1' , { a : 'i am inner a' } ]}const value = _.get(myObj, 'a[1].a.d') Now instead of undefined, if you’d like a default value, you can set it like so 1const value = _.get(myObj, 'a[1].a.d') Thats all there is to it !","link":"/peckingatcode/2020/11/22/how-to-get-a-nested-object-value-using-lodash/"},{"title":"How to log commits to remote branch","text":"Do you have to often switch between the browser and your editor to check the latest commits to a remote branch, to check if any new commits have been added by a developer ? well in that case you can use a combination of commands that would log the latest commits to your console. 1git fetch origin dev-branch and then just log it like below. 1git log --pretty=oneline dev-branch Note for self :- Look up how to alias current branch instead of typing it out.","link":"/peckingatcode/2021/03/14/how-to-log-commits-to-remote-branch/"},{"title":"Vanilla javascript check if variable is a string","text":"you can use the typeof operator like below 12let foo = 'Hello Janco !'console.log(typeof foo) // will log 'string' For a more bullet proof check incase your using object-wrapped strings, you can do a double check like below 123if(typeof foo === 'string' &amp;&amp; foo instanceof String) { // business code goes here !}","link":"/peckingatcode/2021/07/11/vanilla-javascript-check-if-variable-is-a-string/"},{"title":"Babel basic usage guide plus usage with webpack","text":"Just for demostraction purpose lets play around with babel a little and over time i’ll expand on this article on how to used babel alongside webpack. For starters lets create a folder structure that resembles the below :- 123- src - index.js- package.json Let the contents of index.js be as follows. 123const fruits = ['apples', 'oranges', 'mangos']const fruitcopy = [...fruits]const addition = (a,b) =&gt; a + b You should have a package.json folder by default with no dependencies when you run npm init inside the folder ypu’re runnint this project in. Run the below command to add a couple of dev dependencies. 1yarn add @babel/cli @babel/core --dev It is recommended you add these dependencies locally to your project instead of have it globally installed as that makes your project more flexible (you can have different versions based on project) and portable(dependencies can be installed based on package.json).Now you can add the following command inside your package.json file. 123\"scripts\": { \"build\": \"babel src -d lib\"}, Now when you run yarn build in your root folder, you will see a lib directory created but the contents are not quite compiled to ES-5 syntax, which is basically what we want to do with babel. For that to happen we will have to install a present and create a babel.config.json file. 12// Contents of .babel.config.json file in rootdirectoryyarn add @babel/preset-env --dev Also install the present 123{ \"presets\": [\"@babel/preset-env\"]} At this point if you run yarn build you should see a index.js file inside the lib directory with following contents :- 12345678&quot;use strict&quot;;var fruits = ['apples', 'oranges', 'mangos'];var fruitcopy = [].concat(fruits);var addition = function addition(a, b) { return a + b;}; Your final directory shoudl look something like below. 123456- src - index.js- package.json- babel.config.json- lib - index.js Voila ! we’re done and with a no frills setup we are now able to use babel to trasform code into ES-5 compatable executable code, thanks to babel and @babel/preset-env. In larger projects hoever its unlikely we would use babel as a standalone and rather use with alongside a task runner (gulp, grunt) or bundler (eg. webpack). Lets have a look into that in the next series. Also on a sidenote the @babel/preset-env has multile options of its own that you can explore and set so as to reduce your bundle size further. Hope this helped you understand the mystery of babel partially. Cheers !","link":"/peckingatcode/2021/08/21/babel-basic-usage-guide-plus-usage-with-webpack/"},{"title":"git alias for git log and git oneline","text":"In this overly simplistic we’re going to add 2 simple alias for a couple of common git log options. Firstly (keep in mind we use the --graph option below because the output is slightly more clear then just a plan git log), 1234567git log --graph// instead of typing out this command, lets add an aliasgit config --global alias.lg \"log --graph\"// Now you can use the command like sogit lg lastly, 1234567git log --oneline// instead of typing out this command, lets add an aliasgit config --global alias.lo \"log --oneline\"// Now you can use the command like sogit lo","link":"/peckingatcode/2021/09/12/git-alias-for-git-log-and-git-oneline/"},{"title":"Create pizza shape in inkscape","text":"Heres a quick demostration on how to create a pizza shape in inkscape. open inkscape , select the circle tool and draw circle while pressing SHIFT + CMD (on mac), if you still get an uneven circle you can adjust the height and width in the H and W boxes. see below. Now select the circle tool and you should see the start and end input boxes, in the start box enter 270-25=245 and in the end box enter 270+25=295. Voila ! now you should have a perfect pizza shape. see below Thats it for this quick tut. P.S. this is a bit bland but our objective ultimatly is to create a pizza svg animation and this is part of the building blocks. stay tuned.","link":"/peckingatcode/2021/12/15/create-pizza-shape-in-inkscape/"},{"title":"A better pattern then ad-hoc try catch","text":"I was recently working on some controller code in nodejs which has try...catch as the catch all mechanism for errors. something like the below : 1234567891011121314151617181920212223242526const isUserLoggedIn = async (req, res, next) =&gt; { const { email, password } = req.body; if (!email || !password) { // 400 - missing data return res.status(400).json({ error: true }); } try { /* - Typical code for comparing password hash. - Check if user exists. */ await access_tokens.update_user(req.token, USER_DATA); await clearRedis(cannonicalName, req.token); await sendPromotionalEmailer(); return res.status(200).json({ success: true }); } catch (error) { logger.log({ message: error.message, level: 'error' }); return res.status(500).send(error.message); }}; As you can see there are multiple places where there can be a failure case. update_user, clearRedis or sendPromotionalEmailer any of these function calls can throw an error and the control moves on to catch block. I want to do a few of things here : Have a global handler handle 500 error. Have custom error incase of each function call failure. I.E. propogate errors to the top. With the above in mind we can make the following changes. For the global handler we add the following : 1234567app.use(function(error, req, res, next){ if(!error) { next() } logger.log({ message: error.message, level: 'error' }); res.status(500).send('Internal server Error !')}) For the secound point I.E. indivisual error handing for each type of failure, for more granuler control. 12345678910111213141516171819202122232425262728const isUserLoggedIn = async (req, res, next) =&gt; { const { email, password } = req.body; if (!email || !password) { return res.status(400).json({ error: true }); } try { /* - Typical code for comparing password hash. - Check if user exists. */ await access_tokens.update_user(req.token, USER_DATA).catch((error) =&gt; { throw new Error(error); }); await clearRedis(cannonicalName, req.token).catch((error) =&gt; { throw new Error(error); }); await sendPromotionalEmailer().catch((error) =&gt; { throw new Error(error); }); return res.status(200).json({ success: true }); } catch (error) { return next(error); }}; As you can see in the catch block we don’t handler the error anymore, we just propogate it to the top. Lastly, we add catch() blocks to all the calls, though we have’t pushed any custom messages, now we can. To write a more robust error handling function please reference the boilerplate code from express rest boilerplate.","link":"/peckingatcode/2021/12/23/a-better-pattern-then-ad-hoc-try-catch/"},{"title":"Using transactions in sequlize-js","text":"Lets have a quick look at using transactions in sequilizejs, basically this is useful for rolling back queries incase a query fails. Below is a very basic example : 12345678910111213141516171819try { const users_data = await users.create({ email, hashpwd, }); const customer_data = await customers.create({ first_name, last_name, email, }); await clearRedis(cannonicalName, req.token); await sendPromotionalEmailer(); return res.status(200).json({ success: true });} catch (error) { console.log(error)} We can improve the above code by adding transactions like below: 1234567891011121314151617181920212223242526const t = await sequelize.transaction();try { const users_data = await users.create({ email, hashpwd, }, { transaction: t }); const customer_data = await customers.create({ first_name, last_name, email, }, { transaction: t }); await clearRedis(cannonicalName, req.token); await sendPromotionalEmailer(); // If the execution reaches this line, no errors were thrown. // We commit the transaction. await t.commit(); return res.status(200).json({ success: true });} catch (error) { await t.rollback(); console.log(error)} That’s it for this tutorial. Hope you learned something.","link":"/peckingatcode/2021/12/26/using-transactions-in-sequlize-js/"},{"title":"Bending a svg path without adding a new node","text":"A simple trick in inkscape without having to create a new node to bend a path svg. Checkout the below and hope it helps. Cheers.","link":"/peckingatcode/2022/01/12/bending-a-svg-path-without-adding-a-new-node/"},{"title":"Know the starting node and direction in a svg path","text":"How to know the starting node and the direction of a svg path ? Simple select the path and click on Tab once. the first node to be selected is the first node and as far is direction is concerned. Another way to know the direction of the path is , select the path and Extensions → Visualize Path → Number Nodes. Then, Select apply. Hope that helps. Cheers !","link":"/peckingatcode/2022/01/12/know-the-starting-node-and-direction-in-a-svg-path/"},{"title":"Does require create new instance of module","text":"Ever wondered if the require stateent in nodejs creates a new instance of a module ? or does it just cache the imported module ? Lets take a quick peek in this article. Suppose you have the following 3 modules. 12345678910// module-shared.jslet GLOBAL_STR = 'LOGGER :-'const logger = (str) =&gt; { GLOBAL_STR += ' ' + str console.log(GLOBAL_STR)}module.exports = logger 123456789// module-1.jsconst logger = require('./module-shared')const useLogger = () =&gt; { logger('module 1')}module.exports = useLogger 123456789// module-2.jsconst logger = require('./module-shared')const useLogger = () =&gt; { logger('module 2')}module.exports = useLogger And then you required() both module-1.js and module-2.js inside a index.js like so. 12345const useLogger1 = require('./module-1')const useLogger2 = require('./module-2')useLogger1()useLogger2() What you get as the output is 123456LOGGER :- module 1LOGGER :- module 1 module 2// Instead of LOGGER :- module 1LOGGER :- module 2 This is because require cache’s modules. Now there is a way to get around this, but i’ll explain that in a later article. The takeaway here is require does’t create by itself a new instance of a module and caches a module once imported for subsequent imports of the same module. Hope this was educational. Cheers. P.S. Other good articles on the subject How to create a singleton in nodejs","link":"/peckingatcode/2020/11/22/does-require-create-new-instance-of-module/"},{"title":"Reassiging arguments does&#39;t work in es6 and here&#39;s why","text":"Lets run though a quick counter intuitive javascript behaviour you may run into. suppose you have the following function : 123456function validateForm(name, phone, email) { arguments[0] = \"vladimerz\" console.log(`${name} ${arguments[0]}`)}validateForm('nanco') // output :- vladimerz vladimerz But now lets add a default argument to this function like so :- 123456function validateForm(name, phone = null, email) { arguments[0] = \"vladimerz\" console.log(`${name} ${arguments[0]}`)}validateForm('nanco') // output :- nanco vladimerz The outcome is different , and thats because in javacsript when using ES6 syntax and also “strict mode” you don’t get a mapped arguments array. The following is an excerp from the ES6 standardization doc :- A mapped argument object is only provided for non-strict functions that don’t have a rest parameter, any &gt;parameter default value initializers, or any destructured parameters. Cheers.","link":"/peckingatcode/2022/04/29/reassiging-arguments-doest-work-in-es6-and-heres-why/"},{"title":"git diff commands that can save you alot of scrolling","text":"Alrighty , lets get into it. Suppose you wanna check the diff between two commits but only want the file names : 1git diff e79c9cfd5c4a6d6a05c0a6a98a2c02c8b3695c78 a48280889774f5be78cc2817c7c8d541b02a600e --name-only Suppose you wanna check the diff between two commits but only want the file names, but also you wanna exclude the deleted file : 1git diff e79c9cfd5c4a6d6a05c0a6a98a2c02c8b3695c78 a48280889774f5be78cc2817c7c8d541b02a600e --name-only --diff-filter=M Suppose you wanna check the diff between two commits but only want the file names, but also you wanna exclude the deleted file and only show the logs for a specific file type : 1git diff e79c9cfd5c4a6d6a05c0a6a98a2c02c8b3695c78 a48280889774f5be78cc2817c7c8d541b02a600e --name-only --diff-filter=M -- '*.js' For a slightly more advanced use case where you wanna compare the diff between 2 commits but want to exclude all the commits in between checkout this so thread HERE. Also for checking the actualy contents of the diff i use a plugin called git lens in VS code and it has a compare commits feature which give you a more comprehensive analysis/view then a simple git diff &lt;COMMIT ID&gt; &lt;COMMIT ID&gt;. Hope this article was helpful. Cheers.","link":"/peckingatcode/2022/08/09/git-diff-commands-that-can-save-you-alot-of-scrolling/"},{"title":"Link a doc to index in elasticsearch using alias","text":"Sometimes you may have the need to link a doc to an index, cause deleteing the doc associated with a certain unique id becomes so much easier. Example time , first lets create our index. 1234567891011PUT alias_test_index{ \"settings\": {}, \"mappings\": { \"properties\": { \"name\": { \"type\": \"text\" } } }} Now lets add a few _docs to our index 123456789POST alias_test_index/_doc/1{ \"name\": \"anzo\"}POST alias_test_index/_doc/2{ \"name\": \"malko\"} Lets create an alias that links our _doc to the top level index 12345678910111213141516PUT alias_test_index/_aliases{ \"actions\": [ { \"add\": { \"index\": \"alias_test_index\", \"alias\": \"anzo\", \"filter\": { \"term\": { \"name\": \"anzo\" } } } } ]} And now BOOM just like that we can delete a _doc by doing something like 123POST anzo/_delete_by_query?q=*// _doc/1 is gone viola magic!! Learnt this trick from this SO article HERE. Cheers and hope you learnt something.","link":"/peckingatcode/2022/07/08/link-a-doc-to-index-in-elasticsearch-using-alias/"}],"tags":[{"name":"git","slug":"git","link":"/peckingatcode/tags/git/"},{"name":"javascript","slug":"javascript","link":"/peckingatcode/tags/javascript/"},{"name":"productivity","slug":"productivity","link":"/peckingatcode/tags/productivity/"},{"name":"svg","slug":"svg","link":"/peckingatcode/tags/svg/"},{"name":"fetch","slug":"fetch","link":"/peckingatcode/tags/fetch/"},{"name":"github","slug":"github","link":"/peckingatcode/tags/github/"},{"name":"lodash","slug":"lodash","link":"/peckingatcode/tags/lodash/"},{"name":"babel","slug":"babel","link":"/peckingatcode/tags/babel/"},{"name":"ecmascript-6","slug":"ecmascript-6","link":"/peckingatcode/tags/ecmascript-6/"},{"name":"compiler","slug":"compiler","link":"/peckingatcode/tags/compiler/"},{"name":"inkscape","slug":"inkscape","link":"/peckingatcode/tags/inkscape/"},{"name":"animation","slug":"animation","link":"/peckingatcode/tags/animation/"},{"name":"nodejs","slug":"nodejs","link":"/peckingatcode/tags/nodejs/"},{"name":"error-handling","slug":"error-handling","link":"/peckingatcode/tags/error-handling/"},{"name":"sequilizejs","slug":"sequilizejs","link":"/peckingatcode/tags/sequilizejs/"},{"name":"elasticsearch","slug":"elasticsearch","link":"/peckingatcode/tags/elasticsearch/"}],"categories":[]}